#
# Copyright (C) 2012 Auburn University
# Copyright (C) 2012 Mellanox Technologies
# 
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at:
#  
# http://www.apache.org/licenses/LICENSE-2.0
# 
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, 
# either express or implied. See the License for the specific language 
# governing permissions and  limitations under the License.
#
#

Here is the list of what should we test in rdma_client

Correctness Test:  (Immediately after finishing the server side)

1: If JAVA side launches the C++ side process correctly. 
2: If the C++ side process can get the message command 
   from JAVA side correctly.
3: When C++ side get multiple messages from JAVA, 
   if all C++ threads runs correctly.
	(1): If all threads fetches data.
	(2): Is there any threads blocking. 
4: When individual thread start fetching, if the connection
   is set up correctly.
   	(1): If the local RDMA buffer address is sent to 
	     remotely correctly.
	(2): If the local receive wqes are set up correctly.
	     (any memory confliction with RDMA buffer.)
	(3): If the local send wqes are set up correctly.
	(4): If the local event channel and completion 
	     queue channel are set up correctly and bind
	     to epoll correctly.
5: When communication begins, if the client side can send
   message by using IBV_WR_SEND correctly, and if the sending
   finish event triggers the completion queue channel.
6: When communication begins, if the client side can receive
   message from receive wqes correctly, and if the event triggers
   the completion queue channel.
7: When communication begins, if the client side can receive
   data from remote IBV_WR_RDMA_WRITE correctly, and then 
   message over message from remote by receive wqe correctly.


Performance Test: (Maybe in the optimization phase)

1: Should we use re-memory registration or 
   memory buffer for local data input/output from application
   References: "Minimizing the Hidden Cost of RDMA."
2: How to efficiently reduce the cost to set up the new connection
   for RDMA operation.
   (For both server and client side.)
3: How to reduce the frequency of sending control messages.
   References: 
   (1): "High performance RDMA-based MPI implementation over InfiniBand."
   (2): "Adaptive Connection Management for Scalable MPI over InfiniBand."
4: How to diminish the role of original hadoop played in our code. 
